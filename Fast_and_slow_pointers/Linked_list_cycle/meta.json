{
  "problem": {
    "id": 141,
    "title": "Linked List Cycle",
    "difficulty": "Easy",
    "category": "Fast & Slow Pointers"
  },
  "complexity": {
    "hash_set": {"time": "O(n)", "space": "O(n)"},
    "floyd": {"time": "O(n)", "space": "O(1)"}
  },
  "approaches": [
    {
      "name": "Floyd's Cycle Detection",
      "rank": 1,
      "key_insight": "Two pointers at different speeds will meet if cycle exists"
    },
    {
      "name": "Hash Set Tracking",
      "rank": 2,
      "key_insight": "Track visited nodes, return true if revisited"
    }
  ],
  "pattern": {
    "primary": "Fast & Slow Pointers",
    "core_technique": "Mathematical convergence guarantee in cycles"
  },
  "common_mistakes": [
    "Thinking fast pointer can jump over slow pointer",
    "Using node values instead of object references",
    "Starting pointers at different positions"
  ],
  "interview_strategy": {
    "lead_with": "Floyd's algorithm for O(1) space optimization",
    "mention": "Hash set works but uses O(n) space"
  }
}
